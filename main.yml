AWSTemplateFormatVersion: 2010-09-09
Description: AWS 3 Tier Application

Resources:
  ######### CORE #########
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: "default"
      Tags:
        - Key: "Name"
          Value: "3-tier-app-vpc"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: "Name"
          Value: "3-tier-app-ig"

  VpcIGAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  PublicAppSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      CidrBlock: "10.0.0.0/24"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "Name"
          Value: "3-tier-app-public-app-subnet-1"

  PublicAppSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref "AWS::Region"
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "Name"
          Value: "3-tier-app-public-app-subnet-2"

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: "Name"
          Value: "3-tier-app-public-rt"

  InternetGatewayRoute:
    DependsOn: VpcIGAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicAppSubnetsRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicAppSubnet1

  PublicAppSubnetsRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicAppSubnet2

  PrivateMiddlewareSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      CidrBlock: "10.0.2.0/24"
      Tags:
        - Key: "Name"
          Value: "3-tier-app-private-middleware-subnet-1"

  PrivateMiddlewareSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref "AWS::Region"
      CidrBlock: "10.0.3.0/24"
      Tags:
        - Key: "Name"
          Value: "3-tier-app-private-middleware-subnet-2"

  PrivateDatabaseSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      CidrBlock: "10.0.4.0/24"
      Tags:
        - Key: "Name"
          Value: "3-tier-app-private-database-subnet-1"

  PrivateDatabaseSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref "AWS::Region"
      CidrBlock: "10.0.5.0/24"
      Tags:
        - Key: "Name"
          Value: "3-tier-app-private-database-subnet-2"

  NatElasticIp:
    Type: AWS::EC2::EIP

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatElasticIp.AllocationId
      ConnectivityType: "public"
      SubnetId: !Ref PublicAppSubnet1
      Tags:
        - Key: "Name"
          Value: "3-tier-app-nat-gateway"

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: "Name"
          Value: "3-tier-app-private-route-table"

  NatGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateMiddlewareRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateMiddlewareSubnet1

  PrivateMiddlewareRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateMiddlewareSubnet2

  PrivateDatabaseRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateDatabaseSubnet1

  PrivateDatabaseRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateDatabaseSubnet2

  ######### APPLICATION TIER #########
  WebTierLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupDescription: "Web Tier Secutiry Group"
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
      Tags:
        - Key: "Name"
          Value: "3-tier-app-web-tier-sg"

  WebTierLoadBalancer:
    DependsOn: VpcIGAttachment
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: "application"
      Scheme: internet-facing
      SecurityGroups:
        - !Ref WebTierLoadBalancerSecurityGroup
      Subnets:
        - !Ref PublicAppSubnet1
        - !Ref PublicAppSubnet2
      Tags:
        - Key: "Name"
          Value: "3-tier-app-web-tier-load-balancer"

  WebTierTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref Vpc
      Tags:
        - Key: "Name"
          Value: "3-tier-app-web-tier-target-group"

  WebTierLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref WebTierLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !Ref WebTierTargetGroup

  WebInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupDescription: "Web Instance Security Group"
      SecurityGroupIngress:
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref WebTierLoadBalancerSecurityGroup
          FromPort: 80
          ToPort: 80
      Tags:
        - Key: "Name"
          Value: "3-tier-app-web-instance-sg"

  WebInstanceLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: "ami-09d3b3274b6c5d4aa"
        InstanceType: t2.micro
        KeyName: 3TierAppKey
        SecurityGroupIds:
          - !Ref WebInstanceSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo yum update -y
            sudo yum install -y httpd
            sudo systemctl start httpd
            sudo systemctl enable httpd
            echo "Hello World From Application Tier :D" | sudo tee /var/www/html/index.html
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: "Name"
                Value: "3-tier-app-web-tier-launch-template"

  WebTierAutoScalingGroup:
    DependsOn:
      - VpcIGAttachment
      - WebTierLoadBalancerListener
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MaxSize: "2"
      MinSize: "1"
      DesiredCapacity: "2"
      VPCZoneIdentifier:
        - !Ref PublicAppSubnet1
        - !Ref PublicAppSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref WebInstanceLaunchTemplate
        Version: "1"
      TargetGroupARNs:
        - !Ref WebTierTargetGroup
      Tags:
        - Key: "Name"
          Value: "3-tier-app-web-tier-auto-scaling-group"
          PropagateAtLaunch: true

######### MIDDLEWARE TIER #########
  MiddlewareLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupDescription: "Middleware Load Balancer Security Group"
      SecurityGroupIngress:
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref WebInstanceSecurityGroup
          FromPort: 80
          ToPort: 80
      Tags:
        - Key: "Name"
          Value: "3-tier-app-middleware-tier-sg"

  MiddlewareElasticLoadBalancer:
    DependsOn: VpcIGAttachment
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internal
      SecurityGroups:
        - !Ref MiddlewareLoadBalancerSecurityGroup
      Subnets:
        - !Ref PrivateMiddlewareSubnet1
        - !Ref PrivateMiddlewareSubnet2
      Tags:
        - Key: "Name"
          Value: "3-tier-app-middleware-tier-load-balancer"
  
  MiddlewareTierTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref Vpc
      Tags:
        - Key: "Name"
          Value: "3-tier-app-middleware-tier-target-group"

  MiddlewareTierLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref MiddlewareElasticLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !Ref MiddlewareTierTargetGroup
  
  MiddlewareInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupDescription: "Middleware Instance Secutiry Group"
      SecurityGroupIngress:
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref MiddlewareLoadBalancerSecurityGroup
          FromPort: 80
          ToPort: 80
      Tags:
        - Key: "Name"
          Value: "3-tier-app-middleware-instance-sg"
    
  MiddlewareInstanceLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: "ami-09d3b3274b6c5d4aa"
        InstanceType: t2.micro
        KeyName: 3TierAppKey
        SecurityGroupIds:
          - !Ref MiddlewareInstanceSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo yum update -y
            sudo yum install -y httpd
            sudo systemctl start httpd
            sudo systemctl enable httpd
            echo "Hello World From Middleware Tier :D" | sudo tee /var/www/html/index.html
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: "Name"
                Value: "3-tier-app-middleware-tier-launch-template"
  
  MiddlewareTierAutoScalingGroup:
    DependsOn:
      - VpcIGAttachment
      - MiddlewareTierLoadBalancerListener
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MaxSize: "2"
      MinSize: "1"
      DesiredCapacity: "2"
      VPCZoneIdentifier:
        - !Ref PrivateMiddlewareSubnet1
        - !Ref PrivateMiddlewareSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref MiddlewareInstanceLaunchTemplate
        Version: "1"
      TargetGroupARNs:
        - !Ref MiddlewareTierTargetGroup
      Tags:
        - Key: "Name"
          Value: "3-tier-app-middleware-tier-auto-scaling-group"
          PropagateAtLaunch: true

######### DATABASE TIER #########

Outputs:
  VpcId:
    Value: !GetAtt Vpc.VpcId
